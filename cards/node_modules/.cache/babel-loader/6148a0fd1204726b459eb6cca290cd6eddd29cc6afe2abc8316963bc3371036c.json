{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julia\\\\OneDrive\\\\Documentos\\\\privado\\\\cards\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './Game.css'; // Importa el archivo CSS para estilos adicionales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const {\n    player1Name,\n    player2Name\n  } = useParams();\n  const navigate = useNavigate();\n  const [player1DeckId, setPlayer1DeckId] = useState('');\n  const [player2DeckId, setPlayer2DeckId] = useState('');\n  const [player1Cards, setPlayer1Cards] = useState([]);\n  const [player2Cards, setPlayer2Cards] = useState([]);\n  const [player1Sets, setPlayer1Sets] = useState([]);\n  const [player2Sets, setPlayer2Sets] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const player1DeckResponse = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        const player2DeckResponse = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        const player1DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player1DeckResponse.data.deck_id}/draw/?count=10`);\n        const player2DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player2DeckResponse.data.deck_id}/draw/?count=10`);\n        setPlayer1DeckId(player1DeckResponse.data.deck_id);\n        setPlayer2DeckId(player2DeckResponse.data.deck_id);\n        setPlayer1Cards(player1DrawResponse.data.cards);\n        setPlayer2Cards(player2DrawResponse.data.cards);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const organizeSets = (cards, setFunc) => {\n      const sets = [];\n      const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\n      const suits = ['HEARTS', 'DIAMONDS', 'CLUBS', 'SPADES'];\n      const cardsWithInfo = cards.map(card => {\n        const valueIndex = values.indexOf(card.value);\n        const suitIndex = suits.indexOf(card.suit);\n        return {\n          ...card,\n          valueIndex,\n          suitIndex\n        };\n      });\n      const sortedCards = [...cardsWithInfo].sort((a, b) => {\n        return a.valueIndex - b.valueIndex;\n      });\n      const setsBySuit = suits.map(() => []);\n      let currentSet = [];\n      sortedCards.forEach(card => {\n        if (currentSet.length === 0) {\n          currentSet.push(card);\n        } else {\n          const prevCard = currentSet[currentSet.length - 1];\n          if (prevCard.valueIndex === card.valueIndex - 1 && prevCard.suitIndex === card.suitIndex) {\n            currentSet.push(card);\n          } else {\n            setsBySuit[prevCard.suitIndex].push(currentSet);\n            currentSet = [card];\n          }\n        }\n      });\n      if (currentSet.length > 0) {\n        setsBySuit[currentSet[0].suitIndex].push(currentSet);\n      }\n      setsBySuit.forEach(setsInSuit => {\n        setsInSuit.forEach(set => {\n          if (set.length >= 2) {\n            sets.push(set);\n          }\n        });\n      });\n      sortedCards.forEach(card => {\n        if (!sets.some(set => set.includes(card))) {\n          sets.push([card]);\n        }\n      });\n      setFunc(sets);\n    };\n    organizeSets(player1Cards, setPlayer1Sets);\n    organizeSets(player2Cards, setPlayer2Sets);\n  }, [player1Cards, player2Cards]);\n  const handleDrawCard = async () => {\n    try {\n      // Draw a card for player 1\n      const player1DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player1DeckId}/draw/?count=1`);\n      const player1DrawnCard = player1DrawResponse.data.cards[0];\n      const updatedPlayer1Cards = [...player1Cards, player1DrawnCard];\n      const player1DiscardedCard = analyzeAndDiscard(updatedPlayer1Cards);\n\n      // Update player 1 cards\n      setPlayer1Cards(prevCards => {\n        let updatedCards = [...prevCards];\n        if (player1DiscardedCard) {\n          updatedCards = updatedCards.filter(card => card.code !== player1DiscardedCard);\n        }\n        updatedCards.push(player1DrawnCard);\n        return updatedCards;\n      });\n\n      // Draw a card for player 2\n      const player2DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player2DeckId}/draw/?count=1`);\n      const player2DrawnCard = player2DrawResponse.data.cards[0];\n      const updatedPlayer2Cards = [...player2Cards, player2DrawnCard];\n      const player2DiscardedCard = analyzeAndDiscard(updatedPlayer2Cards);\n\n      // Update player 2 cards\n      setPlayer2Cards(prevCards => {\n        let updatedCards = [...prevCards];\n        if (player2DiscardedCard) {\n          updatedCards = updatedCards.filter(card => card.code !== player2DiscardedCard);\n        }\n        updatedCards.push(player2DrawnCard);\n        return updatedCards;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const analyzeAndDiscard = cards => {\n    const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\n    for (let i = 0; i < cards.length; i++) {\n      let currentCard = cards[i];\n\n      // Check for sets of the same value\n      const sameValueSet = cards.filter(card => card.value === currentCard.value);\n      if (sameValueSet.length >= 3) {\n        const discardedCard = sameValueSet[0];\n        return discardedCard.code;\n      }\n\n      // Check for straight of the same suit\n      const sameSuitStraight = [];\n      sameSuitStraight.push(currentCard);\n      for (let j = i + 1; j < cards.length; j++) {\n        const nextCard = cards[j];\n        if (nextCard.suit === currentCard.suit && values.indexOf(nextCard.value) === values.indexOf(currentCard.value) + 1) {\n          sameSuitStraight.push(nextCard);\n          currentCard = nextCard;\n        } else {\n          break;\n        }\n      }\n      if (sameSuitStraight.length >= 3) {\n        const discardedCard = sameSuitStraight[0];\n        return discardedCard.code;\n      }\n    }\n    return null;\n  };\n  const handleFinishGame = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player1Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deck ID: \", player1DeckId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: player1Cards.map(card => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: card.image,\n        alt: `${card.value} of ${card.suit}`,\n        className: \"card\"\n      }, card.code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player2Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deck ID: \", player2DeckId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: player2Cards.map(card => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: card.image,\n        alt: `${card.value} of ${card.suit}`,\n        className: \"card\"\n      }, card.code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDrawCard,\n      children: \"Pedir carta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFinishGame,\n      children: \"Terminar juego\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Qh2GCxBVR4a1258dTcL4gl1+Szk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","useNavigate","jsxDEV","_jsxDEV","Game","_s","player1Name","player2Name","navigate","player1DeckId","setPlayer1DeckId","player2DeckId","setPlayer2DeckId","player1Cards","setPlayer1Cards","player2Cards","setPlayer2Cards","player1Sets","setPlayer1Sets","player2Sets","setPlayer2Sets","fetchData","player1DeckResponse","get","player2DeckResponse","player1DrawResponse","data","deck_id","player2DrawResponse","cards","error","console","log","organizeSets","setFunc","sets","values","suits","cardsWithInfo","map","card","valueIndex","indexOf","value","suitIndex","suit","sortedCards","sort","a","b","setsBySuit","currentSet","forEach","length","push","prevCard","setsInSuit","set","some","includes","handleDrawCard","player1DrawnCard","updatedPlayer1Cards","player1DiscardedCard","analyzeAndDiscard","prevCards","updatedCards","filter","code","player2DrawnCard","updatedPlayer2Cards","player2DiscardedCard","i","currentCard","sameValueSet","discardedCard","sameSuitStraight","j","nextCard","handleFinishGame","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","image","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/julia/OneDrive/Documentos/privado/cards/src/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './Game.css'; // Importa el archivo CSS para estilos adicionales\r\n\r\nconst Game = () => {\r\n  const { player1Name, player2Name } = useParams();\r\n  const navigate = useNavigate();\r\n  const [player1DeckId, setPlayer1DeckId] = useState('');\r\n  const [player2DeckId, setPlayer2DeckId] = useState('');\r\n  const [player1Cards, setPlayer1Cards] = useState([]);\r\n  const [player2Cards, setPlayer2Cards] = useState([]);\r\n  const [player1Sets, setPlayer1Sets] = useState([]);\r\n  const [player2Sets, setPlayer2Sets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const player1DeckResponse = await axios.get(\r\n          'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        );\r\n        const player2DeckResponse = await axios.get(\r\n          'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        );\r\n        const player1DrawResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player1DeckResponse.data.deck_id}/draw/?count=10`\r\n        );\r\n        const player2DrawResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player2DeckResponse.data.deck_id}/draw/?count=10`\r\n        );\r\n\r\n        setPlayer1DeckId(player1DeckResponse.data.deck_id);\r\n        setPlayer2DeckId(player2DeckResponse.data.deck_id);\r\n        setPlayer1Cards(player1DrawResponse.data.cards);\r\n        setPlayer2Cards(player2DrawResponse.data.cards);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const organizeSets = (cards, setFunc) => {\r\n      const sets = [];\r\n      const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\r\n      const suits = ['HEARTS', 'DIAMONDS', 'CLUBS', 'SPADES'];\r\n\r\n      const cardsWithInfo = cards.map((card) => {\r\n        const valueIndex = values.indexOf(card.value);\r\n        const suitIndex = suits.indexOf(card.suit);\r\n        return {\r\n          ...card,\r\n          valueIndex,\r\n          suitIndex\r\n        };\r\n      });\r\n\r\n      const sortedCards = [...cardsWithInfo].sort((a, b) => {\r\n        return a.valueIndex - b.valueIndex;\r\n      });\r\n\r\n      const setsBySuit = suits.map(() => []);\r\n      let currentSet = [];\r\n\r\n      sortedCards.forEach((card) => {\r\n        if (currentSet.length === 0) {\r\n          currentSet.push(card);\r\n        } else {\r\n          const prevCard = currentSet[currentSet.length - 1];\r\n\r\n          if (prevCard.valueIndex === card.valueIndex - 1 && prevCard.suitIndex === card.suitIndex) {\r\n            currentSet.push(card);\r\n          } else {\r\n            setsBySuit[prevCard.suitIndex].push(currentSet);\r\n            currentSet = [card];\r\n          }\r\n        }\r\n      });\r\n\r\n      if (currentSet.length > 0) {\r\n        setsBySuit[currentSet[0].suitIndex].push(currentSet);\r\n      }\r\n\r\n      setsBySuit.forEach((setsInSuit) => {\r\n        setsInSuit.forEach((set) => {\r\n          if (set.length >= 2) {\r\n            sets.push(set);\r\n          }\r\n        });\r\n      });\r\n\r\n      sortedCards.forEach((card) => {\r\n        if (!sets.some((set) => set.includes(card))) {\r\n          sets.push([card]);\r\n        }\r\n      });\r\n\r\n      setFunc(sets);\r\n    };\r\n\r\n    organizeSets(player1Cards, setPlayer1Sets);\r\n    organizeSets(player2Cards, setPlayer2Sets);\r\n  }, [player1Cards, player2Cards]);\r\n\r\n  const handleDrawCard = async () => {\r\n    try {\r\n      // Draw a card for player 1\r\n      const player1DrawResponse = await axios.get(\r\n        `https://deckofcardsapi.com/api/deck/${player1DeckId}/draw/?count=1`\r\n      );\r\n      const player1DrawnCard = player1DrawResponse.data.cards[0];\r\n      const updatedPlayer1Cards = [...player1Cards, player1DrawnCard];\r\n      const player1DiscardedCard = analyzeAndDiscard(updatedPlayer1Cards);\r\n      \r\n      // Update player 1 cards\r\n      setPlayer1Cards((prevCards) => {\r\n        let updatedCards = [...prevCards];\r\n        if (player1DiscardedCard) {\r\n          updatedCards = updatedCards.filter((card) => card.code !== player1DiscardedCard);\r\n        }\r\n        updatedCards.push(player1DrawnCard);\r\n        return updatedCards;\r\n      });\r\n  \r\n      // Draw a card for player 2\r\n      const player2DrawResponse = await axios.get(\r\n        `https://deckofcardsapi.com/api/deck/${player2DeckId}/draw/?count=1`\r\n      );\r\n      const player2DrawnCard = player2DrawResponse.data.cards[0];\r\n      const updatedPlayer2Cards = [...player2Cards, player2DrawnCard];\r\n      const player2DiscardedCard = analyzeAndDiscard(updatedPlayer2Cards);\r\n      \r\n      // Update player 2 cards\r\n      setPlayer2Cards((prevCards) => {\r\n        let updatedCards = [...prevCards];\r\n        if (player2DiscardedCard) {\r\n          updatedCards = updatedCards.filter((card) => card.code !== player2DiscardedCard);\r\n        }\r\n        updatedCards.push(player2DrawnCard);\r\n        return updatedCards;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const analyzeAndDiscard = (cards) => {\r\n    const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\r\n  \r\n    for (let i = 0; i < cards.length; i++) {\r\n      let currentCard = cards[i];\r\n  \r\n      // Check for sets of the same value\r\n      const sameValueSet = cards.filter((card) => card.value === currentCard.value);\r\n      if (sameValueSet.length >= 3) {\r\n        const discardedCard = sameValueSet[0];\r\n        return discardedCard.code;\r\n      }\r\n  \r\n      // Check for straight of the same suit\r\n      const sameSuitStraight = [];\r\n      sameSuitStraight.push(currentCard);\r\n  \r\n      for (let j = i + 1; j < cards.length; j++) {\r\n        const nextCard = cards[j];\r\n  \r\n        if (nextCard.suit === currentCard.suit && values.indexOf(nextCard.value) === values.indexOf(currentCard.value) + 1) {\r\n          sameSuitStraight.push(nextCard);\r\n          currentCard = nextCard;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n  \r\n      if (sameSuitStraight.length >= 3) {\r\n        const discardedCard = sameSuitStraight[0];\r\n        return discardedCard.code;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  };\r\n  \r\n\r\n  const handleFinishGame = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{player1Name}</h2>\r\n      <p>Deck ID: {player1DeckId}</p>\r\n      <div className=\"card-container\">\r\n        {player1Cards.map((card) => (\r\n          <img\r\n            key={card.code}\r\n            src={card.image}\r\n            alt={`${card.value} of ${card.suit}`}\r\n            className=\"card\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <h2>{player2Name}</h2>\r\n      <p>Deck ID: {player2DeckId}</p>\r\n      <div className=\"card-container\">\r\n        {player2Cards.map((card) => (\r\n          <img\r\n            key={card.code}\r\n            src={card.image}\r\n            alt={`${card.value} of ${card.suit}`}\r\n            className=\"card\"\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={handleDrawCard}>Pedir carta</button>\r\n      <button onClick={handleFinishGame}>Terminar juego</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}