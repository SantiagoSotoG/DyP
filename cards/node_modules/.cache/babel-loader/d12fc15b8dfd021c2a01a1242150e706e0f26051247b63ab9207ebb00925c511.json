{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julia\\\\OneDrive\\\\Documentos\\\\privado\\\\cards\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\n// Game.js\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './Game.css'; // Importa el archivo CSS para estilos adicionales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const {\n    player1Name,\n    player2Name\n  } = useParams();\n  const navigate = useNavigate();\n  const [player1DeckId, setPlayer1DeckId] = useState('');\n  const [player2DeckId, setPlayer2DeckId] = useState('');\n  const [player1Cards, setPlayer1Cards] = useState([]);\n  const [player2Cards, setPlayer2Cards] = useState([]);\n  const [player1Sets, setPlayer1Sets] = useState([]);\n  const [player2Sets, setPlayer2Sets] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const player1DeckResponse = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        const player2DeckResponse = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        const player1DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player1DeckResponse.data.deck_id}/draw/?count=10`);\n        const player2DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player2DeckResponse.data.deck_id}/draw/?count=10`);\n        setPlayer1DeckId(player1DeckResponse.data.deck_id);\n        setPlayer2DeckId(player2DeckResponse.data.deck_id);\n        setPlayer1Cards(player1DrawResponse.data.cards);\n        setPlayer2Cards(player2DrawResponse.data.cards);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const organizeSets = (cards, setFunc) => {\n      const sets = [];\n      const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\n      const sortedCards = [...cards].sort((a, b) => {\n        return values.indexOf(a.value) - values.indexOf(b.value);\n      });\n      let currentSet = [sortedCards[0]];\n      for (let i = 1; i < sortedCards.length; i++) {\n        const currentCard = sortedCards[i];\n        const previousCard = sortedCards[i - 1];\n        const currentCardValueIndex = values.indexOf(currentCard.value);\n        const previousCardValueIndex = values.indexOf(previousCard.value);\n        if (currentCardValueIndex === previousCardValueIndex + 1) {\n          // La carta actual tiene el siguiente valor en secuencia\n          currentSet.push(currentCard);\n        } else {\n          // La carta actual no tiene el siguiente valor en secuencia\n          if (currentSet.length >= 3) {\n            // Si el set actual tiene al menos 3 cartas, se considera una escalera y se agrega al resultado\n            sets.push(currentSet);\n          } else {\n            // Si el set actual tiene menos de 3 cartas, se considera un grupo de nÃºmeros iguales y se agrega al resultado\n            if (currentSet.length >= 3) {\n              sets.push(currentSet);\n            }\n          }\n          currentSet = [currentCard]; // Comienza un nuevo set con la carta actual\n        }\n      }\n\n      if (currentSet.length >= 3) {\n        if (currentSet.length >= 3) {\n          sets.push(currentSet);\n        }\n      }\n      setFunc(sets);\n    };\n    organizeSets(player1Cards, setPlayer1Sets);\n    organizeSets(player2Cards, setPlayer2Sets);\n  }, [player1Cards, player2Cards]);\n  const handleFinishGame = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player1Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deck ID: \", player1DeckId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: player1Sets.map((set, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"set\",\n        children: set.map(card => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: `${card.value} of ${card.suit}`,\n          className: \"card\"\n        }, card.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player2Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deck ID: \", player2DeckId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: player2Sets.map((set, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"set\",\n        children: set.map(card => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: `${card.value} of ${card.suit}`,\n          className: \"card\"\n        }, card.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFinishGame,\n      children: \"Terminar juego\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Qh2GCxBVR4a1258dTcL4gl1+Szk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","useNavigate","jsxDEV","_jsxDEV","Game","_s","player1Name","player2Name","navigate","player1DeckId","setPlayer1DeckId","player2DeckId","setPlayer2DeckId","player1Cards","setPlayer1Cards","player2Cards","setPlayer2Cards","player1Sets","setPlayer1Sets","player2Sets","setPlayer2Sets","fetchData","player1DeckResponse","get","player2DeckResponse","player1DrawResponse","data","deck_id","player2DrawResponse","cards","error","console","log","organizeSets","setFunc","sets","values","sortedCards","sort","a","b","indexOf","value","currentSet","i","length","currentCard","previousCard","currentCardValueIndex","previousCardValueIndex","push","handleFinishGame","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","set","index","card","src","image","alt","suit","code","onClick","_c","$RefreshReg$"],"sources":["C:/Users/julia/OneDrive/Documentos/privado/cards/src/Game.js"],"sourcesContent":["// Game.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './Game.css'; // Importa el archivo CSS para estilos adicionales\r\n\r\nconst Game = () => {\r\n  const { player1Name, player2Name } = useParams();\r\n  const navigate = useNavigate();\r\n  const [player1DeckId, setPlayer1DeckId] = useState('');\r\n  const [player2DeckId, setPlayer2DeckId] = useState('');\r\n  const [player1Cards, setPlayer1Cards] = useState([]);\r\n  const [player2Cards, setPlayer2Cards] = useState([]);\r\n  const [player1Sets, setPlayer1Sets] = useState([]);\r\n  const [player2Sets, setPlayer2Sets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const player1DeckResponse = await axios.get(\r\n          'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        );\r\n        const player2DeckResponse = await axios.get(\r\n          'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        );\r\n        const player1DrawResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player1DeckResponse.data.deck_id}/draw/?count=10`\r\n        );\r\n        const player2DrawResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player2DeckResponse.data.deck_id}/draw/?count=10`\r\n        );\r\n\r\n        setPlayer1DeckId(player1DeckResponse.data.deck_id);\r\n        setPlayer2DeckId(player2DeckResponse.data.deck_id);\r\n        setPlayer1Cards(player1DrawResponse.data.cards);\r\n        setPlayer2Cards(player2DrawResponse.data.cards);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const organizeSets = (cards, setFunc) => {\r\n      const sets = [];\r\n      const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\r\n\r\n      const sortedCards = [...cards].sort((a, b) => {\r\n        return values.indexOf(a.value) - values.indexOf(b.value);\r\n      });\r\n\r\n      let currentSet = [sortedCards[0]];\r\n\r\n      for (let i = 1; i < sortedCards.length; i++) {\r\n        const currentCard = sortedCards[i];\r\n        const previousCard = sortedCards[i - 1];\r\n\r\n        const currentCardValueIndex = values.indexOf(currentCard.value);\r\n        const previousCardValueIndex = values.indexOf(previousCard.value);\r\n\r\n        if (currentCardValueIndex === previousCardValueIndex + 1) {\r\n          // La carta actual tiene el siguiente valor en secuencia\r\n          currentSet.push(currentCard);\r\n        } else {\r\n          // La carta actual no tiene el siguiente valor en secuencia\r\n          if (currentSet.length >= 3) {\r\n            // Si el set actual tiene al menos 3 cartas, se considera una escalera y se agrega al resultado\r\n            sets.push(currentSet);\r\n          } else {\r\n            // Si el set actual tiene menos de 3 cartas, se considera un grupo de nÃºmeros iguales y se agrega al resultado\r\n            if (currentSet.length >= 3) {\r\n              sets.push(currentSet);\r\n            }\r\n          }\r\n\r\n          currentSet = [currentCard]; // Comienza un nuevo set con la carta actual\r\n        }\r\n      }\r\n\r\n      if (currentSet.length >= 3) {\r\n        if (currentSet.length >= 3) {\r\n          sets.push(currentSet);\r\n        }\r\n      }\r\n\r\n      setFunc(sets);\r\n    };\r\n\r\n    organizeSets(player1Cards, setPlayer1Sets);\r\n    organizeSets(player2Cards, setPlayer2Sets);\r\n  }, [player1Cards, player2Cards]);\r\n\r\n  const handleFinishGame = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{player1Name}</h2>\r\n      <p>Deck ID: {player1DeckId}</p>\r\n      <div className=\"card-container\">\r\n        {player1Sets.map((set, index) => (\r\n          <div key={index} className=\"set\">\r\n            {set.map((card) => (\r\n              <img\r\n                key={card.code}\r\n                src={card.image}\r\n                alt={`${card.value} of ${card.suit}`}\r\n                className=\"card\"\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <h2>{player2Name}</h2>\r\n      <p>Deck ID: {player2DeckId}</p>\r\n      <div className=\"card-container\">\r\n        {player2Sets.map((set, index) => (\r\n          <div key={index} className=\"set\">\r\n            {set.map((card) => (\r\n              <img\r\n                key={card.code}\r\n                src={card.image}\r\n                alt={`${card.value} of ${card.suit}`}\r\n                className=\"card\"\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={handleFinishGame}>Terminar juego</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}