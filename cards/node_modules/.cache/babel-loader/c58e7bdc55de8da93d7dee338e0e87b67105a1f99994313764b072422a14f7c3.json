{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julia\\\\OneDrive\\\\Documentos\\\\privado\\\\cards\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './Game.css'; // Importa el archivo CSS para estilos adicionales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const {\n    player1Name,\n    player2Name\n  } = useParams();\n  const navigate = useNavigate();\n  const [player1DeckId, setPlayer1DeckId] = useState('');\n  const [player2DeckId, setPlayer2DeckId] = useState('');\n  const [player1Cards, setPlayer1Cards] = useState([]);\n  const [player2Cards, setPlayer2Cards] = useState([]);\n  const [player1Sets, setPlayer1Sets] = useState([]);\n  const [player2Sets, setPlayer2Sets] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const player1DeckResponse = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        const player2DeckResponse = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        const player1DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player1DeckResponse.data.deck_id}/draw/?count=10`);\n        const player2DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player2DeckResponse.data.deck_id}/draw/?count=10`);\n        setPlayer1DeckId(player1DeckResponse.data.deck_id);\n        setPlayer2DeckId(player2DeckResponse.data.deck_id);\n        setPlayer1Cards(player1DrawResponse.data.cards);\n        setPlayer2Cards(player2DrawResponse.data.cards);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const organizeSets = (cards, setFunc) => {\n      const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\n      const suits = ['HEARTS', 'DIAMONDS', 'CLUBS', 'SPADES'];\n\n      // Crea un objeto para cada carta con información adicional\n      const cardsWithInfo = cards.map(card => {\n        const valueIndex = values.indexOf(card.value);\n        const suitIndex = suits.indexOf(card.suit);\n        return {\n          ...card,\n          valueIndex,\n          suitIndex\n        };\n      });\n      const sortedCards = [...cardsWithInfo].sort((a, b) => {\n        return a.valueIndex - b.valueIndex;\n      });\n      const setsBySuit = suits.map(() => []);\n      let currentSet = [];\n      sortedCards.forEach(card => {\n        if (currentSet.length === 0) {\n          currentSet.push(card);\n        } else {\n          const prevCard = currentSet[currentSet.length - 1];\n          if (prevCard.valueIndex === card.valueIndex - 1 && prevCard.suitIndex === card.suitIndex) {\n            currentSet.push(card);\n          } else {\n            setsBySuit[prevCard.suitIndex].push(currentSet);\n            currentSet = [card];\n          }\n        }\n      });\n      if (currentSet.length > 0) {\n        setsBySuit[currentSet[0].suitIndex].push(currentSet);\n      }\n      const sets = [];\n      setsBySuit.forEach(setsInSuit => {\n        setsInSuit.forEach(set => {\n          if (set.length >= 2) {\n            sets.push(set);\n          }\n        });\n      });\n\n      // Agregar las cartas restantes como sets individuales\n      sortedCards.forEach(card => {\n        if (!sets.some(set => set.includes(card))) {\n          sets.push([card]);\n        }\n      });\n      setFunc(sets);\n    };\n    const analyzeAndDiscard = (cards, drawnCard, setFunc) => {\n      const updatedCards = [...cards];\n      let discardedCard = null;\n\n      // Comprobar si la carta se puede agregar a una terna o cuarta\n      for (let i = 0; i < updatedCards.length; i++) {\n        const currentCard = updatedCards[i];\n        if (currentCard.value === drawnCard.value) {\n          // La carta coincide en valor, verificar si se puede agregar a una terna o cuarta\n          const sameValueCards = updatedCards.filter(card => card.value === currentCard.value);\n          if (sameValueCards.length === 2) {\n            // Se encontró una terna completa, descartar la carta con menor índice\n            const minIndex = Math.min(updatedCards.findIndex(card => card.code === sameValueCards[0].code), updatedCards.findIndex(card => card.code === sameValueCards[1].code));\n            discardedCard = updatedCards.splice(minIndex, 1)[0];\n            break;\n          }\n        }\n      }\n      if (!discardedCard) {\n        // Comprobar si la carta se puede agregar a una escalera del mismo palo\n        const sameSuitCards = updatedCards.filter(card => card.suit === drawnCard.suit);\n        if (sameSuitCards.length >= 2) {\n          const sortedCards = [...sameSuitCards, drawnCard].sort((a, b) => {\n            return a.valueIndex - b.valueIndex;\n          });\n          let startIndex = -1;\n          for (let i = 0; i < sortedCards.length - 2; i++) {\n            if (sortedCards[i].valueIndex === sortedCards[i + 1].valueIndex - 1 && sortedCards[i].valueIndex === sortedCards[i + 2].valueIndex - 2) {\n              startIndex = i;\n              break;\n            }\n          }\n          if (startIndex !== -1) {\n            // Se encontró una escalera completa, descartar las cartas que forman la escalera\n            for (let i = startIndex; i < startIndex + 3; i++) {\n              const index = updatedCards.findIndex(card => card.code === sortedCards[i].code);\n              discardedCard = updatedCards.splice(index, 1)[0];\n            }\n          }\n        }\n      }\n      setFunc(updatedCards);\n      return discardedCard;\n    };\n    organizeSets(player1Cards, setPlayer1Sets);\n    organizeSets(player2Cards, setPlayer2Sets);\n  }, [player1Cards, player2Cards]);\n  const handleFinishGame = () => {\n    navigate('/');\n  };\n  const handleDrawCard = async () => {\n    try {\n      const player1DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player1DeckId}/draw/?count=1`);\n      const player2DrawResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player2DeckId}/draw/?count=1`);\n      const drawnCard1 = player1DrawResponse.data.cards[0];\n      const drawnCard2 = player2DrawResponse.data.cards[0];\n      const discardedCard1 = analyzeAndDiscard(player1Cards, drawnCard1, setPlayer1Cards);\n      const discardedCard2 = analyzeAndDiscard(player2Cards, drawnCard2, setPlayer2Cards);\n      if (discardedCard1) {\n        const player1AddCardResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player1DeckId}/pile/discard/add/?cards=${discardedCard1.code}`);\n        console.log(player1AddCardResponse.data);\n      }\n      if (discardedCard2) {\n        const player2AddCardResponse = await axios.get(`https://deckofcardsapi.com/api/deck/${player2DeckId}/pile/discard/add/?cards=${discardedCard2.code}`);\n        console.log(player2AddCardResponse.data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player1Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deck ID: \", player1DeckId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: player1Sets.map((set, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"set\",\n        children: set.map(card => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: `${card.value} of ${card.suit}`,\n          className: \"card\"\n        }, card.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player2Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Deck ID: \", player2DeckId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: player2Sets.map((set, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"set\",\n        children: set.map(card => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: `${card.value} of ${card.suit}`,\n          className: \"card\"\n        }, card.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDrawCard,\n      children: \"Pedir carta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFinishGame,\n      children: \"Terminar juego\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Qh2GCxBVR4a1258dTcL4gl1+Szk=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","useNavigate","jsxDEV","_jsxDEV","Game","_s","player1Name","player2Name","navigate","player1DeckId","setPlayer1DeckId","player2DeckId","setPlayer2DeckId","player1Cards","setPlayer1Cards","player2Cards","setPlayer2Cards","player1Sets","setPlayer1Sets","player2Sets","setPlayer2Sets","fetchData","player1DeckResponse","get","player2DeckResponse","player1DrawResponse","data","deck_id","player2DrawResponse","cards","error","console","log","organizeSets","setFunc","values","suits","cardsWithInfo","map","card","valueIndex","indexOf","value","suitIndex","suit","sortedCards","sort","a","b","setsBySuit","currentSet","forEach","length","push","prevCard","sets","setsInSuit","set","some","includes","analyzeAndDiscard","drawnCard","updatedCards","discardedCard","i","currentCard","sameValueCards","filter","minIndex","Math","min","findIndex","code","splice","sameSuitCards","startIndex","index","handleFinishGame","handleDrawCard","drawnCard1","drawnCard2","discardedCard1","discardedCard2","player1AddCardResponse","player2AddCardResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","image","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/julia/OneDrive/Documentos/privado/cards/src/Game.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './Game.css'; // Importa el archivo CSS para estilos adicionales\r\n\r\nconst Game = () => {\r\n  const { player1Name, player2Name } = useParams();\r\n  const navigate = useNavigate();\r\n  const [player1DeckId, setPlayer1DeckId] = useState('');\r\n  const [player2DeckId, setPlayer2DeckId] = useState('');\r\n  const [player1Cards, setPlayer1Cards] = useState([]);\r\n  const [player2Cards, setPlayer2Cards] = useState([]);\r\n  const [player1Sets, setPlayer1Sets] = useState([]);\r\n  const [player2Sets, setPlayer2Sets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const player1DeckResponse = await axios.get(\r\n          'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        );\r\n        const player2DeckResponse = await axios.get(\r\n          'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n        );\r\n        const player1DrawResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player1DeckResponse.data.deck_id}/draw/?count=10`\r\n        );\r\n        const player2DrawResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player2DeckResponse.data.deck_id}/draw/?count=10`\r\n        );\r\n\r\n        setPlayer1DeckId(player1DeckResponse.data.deck_id);\r\n        setPlayer2DeckId(player2DeckResponse.data.deck_id);\r\n        setPlayer1Cards(player1DrawResponse.data.cards);\r\n        setPlayer2Cards(player2DrawResponse.data.cards);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const organizeSets = (cards, setFunc) => {\r\n      const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'JACK', 'QUEEN', 'KING', 'ACE'];\r\n      const suits = ['HEARTS', 'DIAMONDS', 'CLUBS', 'SPADES'];\r\n  \r\n      // Crea un objeto para cada carta con información adicional\r\n      const cardsWithInfo = cards.map((card) => {\r\n        const valueIndex = values.indexOf(card.value);\r\n        const suitIndex = suits.indexOf(card.suit);\r\n        return {\r\n          ...card,\r\n          valueIndex,\r\n          suitIndex\r\n        };\r\n      });\r\n  \r\n      const sortedCards = [...cardsWithInfo].sort((a, b) => {\r\n        return a.valueIndex - b.valueIndex;\r\n      });\r\n  \r\n      const setsBySuit = suits.map(() => []);\r\n      let currentSet = [];\r\n  \r\n      sortedCards.forEach((card) => {\r\n        if (currentSet.length === 0) {\r\n          currentSet.push(card);\r\n        } else {\r\n          const prevCard = currentSet[currentSet.length - 1];\r\n  \r\n          if (prevCard.valueIndex === card.valueIndex - 1 && prevCard.suitIndex === card.suitIndex) {\r\n            currentSet.push(card);\r\n          } else {\r\n            setsBySuit[prevCard.suitIndex].push(currentSet);\r\n            currentSet = [card];\r\n          }\r\n        }\r\n      });\r\n  \r\n      if (currentSet.length > 0) {\r\n        setsBySuit[currentSet[0].suitIndex].push(currentSet);\r\n      }\r\n  \r\n      const sets = [];\r\n  \r\n      setsBySuit.forEach((setsInSuit) => {\r\n        setsInSuit.forEach((set) => {\r\n          if (set.length >= 2) {\r\n            sets.push(set);\r\n          }\r\n        });\r\n      });\r\n  \r\n      // Agregar las cartas restantes como sets individuales\r\n      sortedCards.forEach((card) => {\r\n        if (!sets.some((set) => set.includes(card))) {\r\n          sets.push([card]);\r\n        }\r\n      });\r\n  \r\n      setFunc(sets);\r\n    };\r\n\r\n    const analyzeAndDiscard = (cards, drawnCard, setFunc) => {\r\n      const updatedCards = [...cards];\r\n      let discardedCard = null;\r\n  \r\n      // Comprobar si la carta se puede agregar a una terna o cuarta\r\n      for (let i = 0; i < updatedCards.length; i++) {\r\n        const currentCard = updatedCards[i];\r\n  \r\n        if (currentCard.value === drawnCard.value) {\r\n          // La carta coincide en valor, verificar si se puede agregar a una terna o cuarta\r\n          const sameValueCards = updatedCards.filter((card) => card.value === currentCard.value);\r\n  \r\n          if (sameValueCards.length === 2) {\r\n            // Se encontró una terna completa, descartar la carta con menor índice\r\n            const minIndex = Math.min(\r\n              updatedCards.findIndex((card) => card.code === sameValueCards[0].code),\r\n              updatedCards.findIndex((card) => card.code === sameValueCards[1].code)\r\n            );\r\n  \r\n            discardedCard = updatedCards.splice(minIndex, 1)[0];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (!discardedCard) {\r\n        // Comprobar si la carta se puede agregar a una escalera del mismo palo\r\n        const sameSuitCards = updatedCards.filter((card) => card.suit === drawnCard.suit);\r\n  \r\n        if (sameSuitCards.length >= 2) {\r\n          const sortedCards = [...sameSuitCards, drawnCard].sort((a, b) => {\r\n            return a.valueIndex - b.valueIndex;\r\n          });\r\n  \r\n          let startIndex = -1;\r\n  \r\n          for (let i = 0; i < sortedCards.length - 2; i++) {\r\n            if (\r\n              sortedCards[i].valueIndex === sortedCards[i + 1].valueIndex - 1 &&\r\n              sortedCards[i].valueIndex === sortedCards[i + 2].valueIndex - 2\r\n            ) {\r\n              startIndex = i;\r\n              break;\r\n            }\r\n          }\r\n  \r\n          if (startIndex !== -1) {\r\n            // Se encontró una escalera completa, descartar las cartas que forman la escalera\r\n            for (let i = startIndex; i < startIndex + 3; i++) {\r\n              const index = updatedCards.findIndex((card) => card.code === sortedCards[i].code);\r\n              discardedCard = updatedCards.splice(index, 1)[0];\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      setFunc(updatedCards);\r\n  \r\n      return discardedCard;\r\n    };\r\n  \r\n    organizeSets(player1Cards, setPlayer1Sets);\r\n    organizeSets(player2Cards, setPlayer2Sets);\r\n  }, [player1Cards, player2Cards]);\r\n\r\n  const handleFinishGame = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleDrawCard = async () => {\r\n    try {\r\n      const player1DrawResponse = await axios.get(\r\n        `https://deckofcardsapi.com/api/deck/${player1DeckId}/draw/?count=1`\r\n      );\r\n      const player2DrawResponse = await axios.get(\r\n        `https://deckofcardsapi.com/api/deck/${player2DeckId}/draw/?count=1`\r\n      );\r\n\r\n      const drawnCard1 = player1DrawResponse.data.cards[0];\r\n      const drawnCard2 = player2DrawResponse.data.cards[0];\r\n\r\n      const discardedCard1 = analyzeAndDiscard(player1Cards, drawnCard1, setPlayer1Cards);\r\n      const discardedCard2 = analyzeAndDiscard(player2Cards, drawnCard2, setPlayer2Cards);\r\n\r\n      if (discardedCard1) {\r\n        const player1AddCardResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player1DeckId}/pile/discard/add/?cards=${discardedCard1.code}`\r\n        );\r\n        console.log(player1AddCardResponse.data);\r\n      }\r\n\r\n      if (discardedCard2) {\r\n        const player2AddCardResponse = await axios.get(\r\n          `https://deckofcardsapi.com/api/deck/${player2DeckId}/pile/discard/add/?cards=${discardedCard2.code}`\r\n        );\r\n        console.log(player2AddCardResponse.data);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{player1Name}</h2>\r\n      <p>Deck ID: {player1DeckId}</p>\r\n      <div className=\"card-container\">\r\n        {player1Sets.map((set, index) => (\r\n          <div key={index} className=\"set\">\r\n            {set.map((card) => (\r\n              <img\r\n                key={card.code}\r\n                src={card.image}\r\n                alt={`${card.value} of ${card.suit}`}\r\n                className=\"card\"\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <h2>{player2Name}</h2>\r\n      <p>Deck ID: {player2DeckId}</p>\r\n      <div className=\"card-container\">\r\n        {player2Sets.map((set, index) => (\r\n          <div key={index} className=\"set\">\r\n            {set.map((card) => (\r\n              <img\r\n                key={card.code}\r\n                src={card.image}\r\n                alt={`${card.value} of ${card.suit}`}\r\n                className=\"card\"\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={handleDrawCard}>Pedir carta</button>\r\n      <button onClick={handleFinishGame}>Terminar juego</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}